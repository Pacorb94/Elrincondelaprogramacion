security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            #Podemos usar diferentes tipos de encriptaci칩n
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                #Cambiamos la clave "username" por "email" cuando enviamos el json con los datos
                #del usuario
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            guard: 
                authenticators: 
                    - lexik_jwt_authentication.jwt_token_authenticator

    access_control:
        #S칩lo entrar치n los usuarios que no est치n logueados
        - { path: /api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: /api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #Rutas de usuario con ROLE_ADMIN
        - { path: /api/users/[0-9]+/ban, roles: ROLE_ADMIN }
        - { path: ^/api/[category|categories], roles: ROLE_ADMIN }
        - { path: /api/posts/[0-9]+/inadequate, roles: ROLE_ADMIN }
        #Rutas de usuario con ROLE_WRITER
        - { path: /api/post/create, roles: ROLE_WRITER }
        - { path: /api/posts/[0-9]+/update, roles: ROLE_WRITER }
     